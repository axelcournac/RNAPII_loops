#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Oct 20 17:08:07 2022
@author: axel
comparison of agglo with home made codes and with chromosight 
"""

import numpy as np
import scipy
from scipy.sparse import coo_matrix 
from scipy.sparse import csr_matrix 
import time
import itertools
import matplotlib.pylab as plt
import json
import pandas as pd
from scipy import stats
import matplotlib.gridspec as gridspec
import sys 

# from home made code: 

#m=np.loadtxt("/home/axel/Bureau/z_python_scripts_copy/log_qpaper_pairs_peaks_1.5_PolII_Log_1.5_raw_20.txt")
#plt.figure(11)
#plt.imshow( np.log(m), cmap='bwr', vmin=-0.2, vmax=0.2)
#plt.colorbar()

# using chromosight 
# chromosight quantify --pattern=loops  --perc-undetected=100 --perc-zero=100 /home/axel/Bureau/YEAST/pairs_peaks_1.5_PolII_Log_1.5.txt.long.bg2 /media/axel/LaCie/quiescence_2019/fastq/out_Micro-C_WT_log_redone/tmp/valid_idx_pcrfree.pairs.cool log_qpaper


# On charge le fichier

file_json=sys.argv[1]   # json file generated by chromosight 
#file_json='/home/axel/Bureau/chipexo_loop_large_analysis/log_qpaper.json'

wins = json.load(open(file_json)) 

# On transforme chaque fenetre de list2d en np.array
wins = {int(k): np.array(v) for k, v in wins.items()}                                          

# Pour plotter la 1ere fenetre, p.ex
#plt.imshow(wins[0]); plt.show()                                                                 

# On shape les fenetres dans un array 3D de shape (n_wins, width, height)
wind3s = np.array(list(wins.values()))
# On calcule la moyenne le long de l'axe 0 pour faire le pileup, et on plot
pileup = np.apply_along_axis(np.nanmean, 0, wind3s)

# natural scale:                                           
#plt.imshow( pileup, cmap='seismic', vmin=0.8, vmax=1.2)   
#plt.colorbar()

# log scale: 
plt.imshow( np.log(pileup), cmap='bwr', vmin=-0.2, vmax=0.2) 
plt.colorbar()
plt.savefig(file_json+".chromosight.pdf")  
plt.close()

# Plot of the distribution of the scores: 
file_tsv=sys.argv[2]   # tsv file generated by chromosight 
#file_tsv='/home/axel/Bureau/z_python_scripts_copy/log_qpaper.tsv'

df1=pd.read_table(file_tsv,header=0, delimiter="\t") 

plt.hist(df1['score'],50)
plt.xlabel("score", fontsize=20)
plt.ylabel("N. occ", fontsize=20)

#plt.title("Median "+str(np.nanmedian(df1['score']) ) +
#          " Mean "+str(np.nanmean(df1['score'])), fontsize=30)

plt.title(" Mean "+str(np.round(np.nanmean(df1['score']),3))+
          " Median "+str(np.round(np.nanmedian(df1['score']),3))+"\n"+
          file_json, fontsize=20)
plt.xlim(-0.7,0.7)
#plt.xlim(np.nanmin(df1['score']),np.nanmax(df1['score']))

#plt.axvline(x=np.nanmedian(df1['score']),color='red')
plt.savefig(file_tsv+".chromosight.pdf")

# Text file
text_file = open(file_tsv+".txt", "w")
#write string to file
#text_file.write(file_tsv+"  Median "+str(np.nanmedian(df1['score']) ) +
 #         " Mean "+str(np.nanmean(df1['score'])))
text_file.write(file_tsv+"\t"+str(np.nanmedian(df1['score']) ) +
          "\t"+str(np.nanmean(df1['score'])))
#close file
text_file.close()








